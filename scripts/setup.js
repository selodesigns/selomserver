#!/usr/bin/env node

const fs = require('fs-extra');
const path = require('path');
const readline = require('readline');
const { v4: uuidv4 } = require('uuid');
const bcrypt = require('bcryptjs');
const crypto = require('crypto');

// Create readline interface for user input
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Constants
const ENV_FILE_PATH = path.join(__dirname, '..', 'server', '.env');
const DEFAULT_PORT = 32400;
const DEFAULT_SERVER_NAME = 'SELO Media Server';
const DB_PATH = path.join(__dirname, '..', 'server', 'data', 'media.db');
const DB_CONFIG_PATH = path.join(__dirname, '..', 'server', 'config', 'database.js');
const USER_MODEL_PATH = path.join(__dirname, '..', 'server', 'models', 'User.js');

// Print welcome message
console.log('\nüé¨ SELO Media Server Setup\n');
console.log('This script will help you configure your SELO Media Server.');
console.log('Press Enter to use the default value shown in [brackets].\n');

// Function to ask a question and get user input
function question(query, defaultAnswer) {
  return new Promise((resolve) => {
    const defaultText = defaultAnswer ? ` [${defaultAnswer}]` : '';
    rl.question(`${query}${defaultText}: `, (answer) => {
      resolve(answer.trim() || defaultAnswer);
    });
  });
}

// Function to validate port number
function validatePort(port) {
  const parsedPort = parseInt(port, 10);
  return !isNaN(parsedPort) && parsedPort > 0 && parsedPort < 65536;
}

// Main setup function
async function setup() {
  try {
    // Check if .env file already exists
    const envExists = await fs.pathExists(ENV_FILE_PATH);
    let currentEnv = {};
    
    // If .env exists, read its contents
    if (envExists) {
      console.log('Found existing configuration file.');
      const envContent = await fs.readFile(ENV_FILE_PATH, 'utf8');
      
      // Parse existing .env file
      envContent.split('\n').forEach(line => {
        const match = line.match(/^([^#=]+)=(.*)$/);
        if (match) {
          currentEnv[match[1].trim()] = match[2].trim();
        }
      });
    }
    
    // Get server name
    const serverName = await question(
      'Server name',
      currentEnv.SERVER_NAME || DEFAULT_SERVER_NAME
    );
    
    // Get port
    let port;
    do {
      port = await question(
        'Server port',
        currentEnv.PORT || DEFAULT_PORT
      );
      
      if (!validatePort(port)) {
        console.log('Invalid port number. Please enter a number between 1 and 65535.');
      }
    } while (!validatePort(port));
    
    // Generate or use existing server ID
    const serverId = currentEnv.SERVER_ID || uuidv4();
    console.log(`Server ID: ${serverId}`);
    
    // Get log level
    const logLevel = await question(
      'Log level (error, warn, info, debug)',
      currentEnv.LOG_LEVEL || 'info'
    );
    
    // Generate JWT secret
    const jwtSecret = currentEnv.JWT_SECRET || crypto.randomBytes(32).toString('hex');
    
    // Create .env content
    const envContent = `PORT=${port}
SERVER_NAME=${serverName}
SERVER_ID=${serverId}
LOG_LEVEL=${logLevel}
VERSION=1.0.0
JWT_SECRET=${jwtSecret}
# Generated by setup script on ${new Date().toISOString()}`;
    
    // Write .env file
    await fs.writeFile(ENV_FILE_PATH, envContent);
    console.log(`\nConfiguration saved to ${ENV_FILE_PATH}`);
    
    // Ask if user wants to set up an admin account
    const setupAdmin = await question('Set up admin account? (y/n)', 'y');
    
    if (setupAdmin.toLowerCase() === 'y' || setupAdmin.toLowerCase() === 'yes') {
      // Check if database models are initialized
      if (!fs.existsSync(DB_CONFIG_PATH) || !fs.existsSync(USER_MODEL_PATH)) {
        console.error('\nError: Database configuration files not found. Please run: npm install');
        return;
      }
      
      console.log('\nüìù Creating Admin User\n');
      
      const username = await question('Admin username', 'admin');
      const email = await question('Admin email');
      const displayName = await question('Admin display name', username);
      
      // Password with confirmation
      let password, confirmPassword;
      do {
        password = await question('Password (min 8 chars)');
        if (password.length < 8) {
          console.log('Password must be at least 8 characters long.');
          continue;
        }
        
        confirmPassword = await question('Confirm password');
        
        if (password !== confirmPassword) {
          console.log('Passwords do not match. Please try again.');
        }
      } while (password.length < 8 || password !== confirmPassword);
      
      // Initialize database and create admin user
      try {
        // Require DB only after .env is created to ensure it picks up the environment variables
        require('dotenv').config({ path: ENV_FILE_PATH });
        console.log('Initializing database...');
        
        // Initialize sequelize
        const { sequelize, User } = require('../server/models');
        
        // Test database connection
        await sequelize.authenticate();
        console.log('Database connection established.');
        
        // Force sync in development to create tables
        await sequelize.sync({ force: true });
        console.log('Database tables created.');
        
        // Hash password
        const salt = await bcrypt.genSalt(10);
        const hashedPassword = await bcrypt.hash(password, salt);
        
        // Create admin user
        const adminUser = await User.create({
          username,
          email,
          password_hash: hashedPassword,
          display_name: displayName,
          is_admin: true,
          created_at: new Date(),
          updated_at: new Date()
        });
        
        console.log(`\n‚úÖ Admin user '${username}' created successfully!`);
      } catch (error) {
        console.error('\nError creating admin user:', error.message);
        console.error('Please make sure the server package is installed correctly.');
      }
    }
    
    console.log('\n‚úÖ Setup complete!');
    console.log('You can now start your server with: npm start');
    
  } catch (error) {
    console.error('Error during setup:', error);
  } finally {
    rl.close();
  }
}

// Run setup
setup();
